---
title: "R boot camp for Graduate Students - Day 1"
author: "Corey S. Sparks, Ph.D."
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
    html:
      toc: true
      code-fold: false
      code-tools: true
      code-link: true
      df-print: paged
editor: visual
---

![](images/dem.png){fig-align="center"}

# R boot camp for Graduate Students

When: August 16, 6pm to 8pm

Where: [Zoom Link Here](https://utsa.zoom.us/j/3610228956)

## What we will do:

This will be a short introduction to the R statistical programming language. This is intended to ease the anxiety over using R for your statistics courses. We realize that many incoming students have not used R or any programming language.

# What you'll get from this:

This boot camp will get you set up on your personal computer using R. This includes installing R, Rstudio and any other associated software, and getting you oriented with where things are.

We will also cover fundamentals of reading in external data, data summaries, data visualization and the use of the tidyverse for literate programming.

# Agenda

```{r, echo=FALSE, results='asis'}
#| label: tbl-agenda1
#| echo: false
#| tbl-cap: "Agenda for boot camp"

t1<-data.frame(Day = c(rep("Day 1", 7),"---", rep("Day 2", 7)),
               topic = c("Introduction/What is R?",
"Installing R and Rstudio on your computer",
"Introduction to Rstudio",
"Break",
"Reading common files into R",
"Using R to summarize data",
"Q&A",
"   ",
"Welcome/Questions",
"Basic ggplot",
"Break",
"Basic dplyr",
"R file types",
"Common packages",
"Q&A"))

knitr::kable(t1, align = "c")

```

# Day 1

## What is R?

R was first implemented in the early 1990's by Robert Gentleman and Ross Ihaka, both faculty members at the University of Auckland. It is an open source software system that specializes in statistical analysis and graphics. R is its own programming language and the R ecosystem includes over 18,000 user-contributed additions to the software, known as packages.

I've used R for twenty years. I was also trained in SPSS and SAS along the way, by various mentors. Some tried to get me to learn more general purpose languages like Delphi (of all things) or Perl, or Basic, and I've been chastised for not knowing the depths of Python, but R presents a nimble and rigorous platform to do demography. My top three reasons for teaching and using R are:

1.  It's free - This is important, because, why should we pass along more costs to people, especially our students? This also make R code accessible to people, worldwide.
2.  It's the hotbed of methodological development. The R ecosystem has thousands of packages that represent the bleeding edge of data analysis, visualization and data science. This makes R attractive because it can pivot quickly to adopt new methods, which often lag in their development in other environments.
3.  It has a supportive community of users. While there are some debates over how friendly some R users are to new users, overall, after spending 20 years in the R community, I've personally assisted hundreds of users, and been personally helped by many others. The open source nature of R lends itself to sharing of ideas and collaboration between users.

## Installing R and Rstudio on your computer {#sec-installing-r-and-rstudio-on-your-computer}

Steps:

1.  Install base R using the appropriate installer for your computer (Windows, Mac, Linux) If you already have an R version installed on your computer, it's best to install the current version (4.2.1 as of this document)
2.  Install Rstudio, an Integrated Development Environment for R
3.  If you are a Windows user, install Rtools, which provides other tools for R to use on Windows systems.

### Links:

-   [R installers](https://cran.r-project.org/)

-   [R studio download](https://www.rstudio.com/products/rstudio/download/#download)

-   [Rtools download (windows only)](https://cran.r-project.org/bin/windows/Rtools/rtools42/files/rtools42-5253-5107-signed.exe)

## Introduction to Rstudio {#sec-introduction-to-rstudio}

Rstudio is an open source Integrated Development Environment (IDE) for R. It is a much better interface for using R because it allows you to write code in multiple languages, navigate your computer's files, and see your output in a very nice single place. The Rstudio IDE has several components that we will explore.

![](images/rstudio.png){fig-align="center"}

### Code window/Source editor pane

-   This is where you write your R code. You can write R code in a few different file types (more on this later), but the basic one is an R script, with file extension .R

-   The code window allows you to write and execute your code one line at a time, or to run an entire script at once. I use this to develop new code and when I want to test if things work (a VERY common exercise when writing any code).

-   To run a single line of code, put your cursor on the line and hit Ctrl-Enter (on Mac CMD-Enter also does this)

-   To run multiple lines of code, highlight the lines you want to run and do the same thing

### Console Pane

-   This is where most of your non-graphical output will be shown. Any numeric output will appear here, as well as any warnings or error messages. In R a warning doesn't necessarily mean something went wrong, its just R's polite way of telling you to pay attention.

-   An Error means something did go wrong. This is often because you left off a ) or a, sometimes because you misspelled something. I routinely spell `length` as `lenght` which causes R to print an error message. If you see an error, don't worry, R will print some kind of message telling you what went wrong.

-   R's output is in plain text, although we can produce much prettier output using other output methods, and we'll talk more about that later.

-   You can type commands or code into the console as well, and you'll immediately get the result, versus if you write it in the Source/Code window, you have to run it to see the result. I will often work in the console when I want to get "fast" answers, meaning little checks that I will often do to see the value of something.

### Environment or Workspace browser pane

-   The R environment is where any object you create is stored. In R, anything you read in or create with your code is called an object, and R is said to be an object oriented programming language.

-   Depending on the type of object something is, you may be able to click on the object in the environment and see more about it.

-   For instance if the object is a dataframe, R will open it in a viewer where you can explore it like a spreadsheet, and sort and filter it as well.

-   Other objects may not do anything when you click on them.

-   There is also a useful History tab here that shows you recently executed lines of code from the console or the code pane.

### Files/Output/Help pane

-   The files and output area is where you can interact with files on your local computer, such as data files or code files, or images that R can open.

-   This area also has a plots window that will display plots you create in R either via typing directly into the console or by running a line(s) of code from the source/code pane.

-   There is also a very valuable part of this pane that lets you access the help system in R. If you are either looking for something, or you just want to explore the functions, you can get access to all of this here.

# Break

## Reading common file types into R {#sec-reading-common-file-types-into-r}

Many of you have data or maybe R code you've written before that you want to open in R. Depending on the type of file there are many ways to do this. Using the Files pane is an easy way to get R to open existing files for you. This will use an appropriate R function to read in the file and load it into R's workspace/environment.

Excel spreadsheets and their text equivalent Comma Separated Value (`csv`) files are able to be clicked on in the Files pane and will open directly into R. R will also import via the point and click method data files from SPSS (`.sav`) and Stata (`.dta`). Likewise R's own native data sets (`.rds` or `.rdata`) files can also be clicked on directly in the files pane and loaded directly into the environment.

Some files, particularly data files produced by SAS require special functions to read into R. To read a SAS dataset (`.sas7bdat`) into R, use:

```{r, eval=FALSE}
haven::read_sas("/path_to_file/filename.sas7bdat")
```

Or to read in a SPSS dataset use:

```{r, eval=FALSE}
haven::read_spss("/path_to_file/filename.sav")
```

You can also read data directly from the internet, if it exists as a link-able file. For instance, if I wanted to read a data set that is a csv from a website, you can use the `url()` function, and provide it the link address:

```{r}
#| message: false
prb = readr::read_csv(url("https://raw.githubusercontent.com/coreysparks/r_courses/master/2018_WPDS_Data_Table_FINAL.csv"))
```

We can view the first few lines of the data using the `head()` function:

```{r}
#| eval: false
head(prb)
```

```{r}
#| echo: false
#| label: tbl-rawdata
#| tbl-cap: "Penguin measurement data"

knitr::kable(head(prb))
```

## Summarizing data {#sec-summarizing-data}

One of the key elements of analyzing data is the initial descriptive analysis of it. For now, I want to illustrate some simple but effective commands for summarizing data.

R's basic way of storing data is as a structure called a **dataframe**, which you can think of as a table, much like a spreadsheet.

Dataframes can store any type of data but usually store numeric or character variable types. Depending on what kind of data are in a dataframe, R will summarize it differently.

To show all of the columns in a dataframe use the `names()` function

```{r}
names(prb)
```

There are a few different ways to access a particular variable in a dataframe. The customary method is to use the `$` operator. Here's an example:

```{r}
head(prb$country)
```

There are other ways to view a variable within a dataframe, such as using the **subset** operators `[`

```{r}
head(prb[, "country"])
```

## Dataframe summaries {#sec-dataframe-summaries}

The `summary()` function is very useful both in terms of producing numerical summaries of individual variables, but also shows summaries of entire dataframes. Its output differs based on the type of variable you give it, for character variables it does not return any summary.

For factor variables, it returns a frequency table,

```{r, message=FALSE}
summary(prb$region)
```

```{r}
summary(as.factor(prb$continent))
```

and for numeric variables, it returns the five number summary plus the mean.

```{r}
summary(prb$pctwomcontra_mod)
```

I find this function to be very useful when I'm initially exploring a data set, so I can easily see the min/max values of a variable, as well as the number of missing values, reported as `NA` in R output. The `summary()` function can be used on a single variable within a dataframe, the entire dataframe, or on a simple vector.

There are many alternatives to this base summary function, including `psych::describe()`, `Hmisc::describe()`, and `skimr::skim()`, all of which produce summaries of dataframes or variables.

```{r}
psych::describe(prb, fast = F )

```

```{r}
skimr::skim(prb)
```

### Frequency tables

A basic exploration of data, especially if your data have categorical or nominal variables, includes the extensive use of frequency tables. If you're simply looking at the number of observations in each level of a categorical variable, or using frequency tables to aggregate data, they are some of the most useful basic statistical summaries around.

The basic function for constructing simple tables is `table()` in base R. More sophisticated table construction is allowed in `xtabs()`.

Let's have a look at some descriptive information about the data:

### Frequency Table of \# of Countries by Continent

```{r}
table(prb$continent)
```

### Measures of central tendency

We can use graphical methods to describe what data 'look like' in a visual sense, but graphical methods are rarely useful for comparative purposes. In order to make comparisons, you need to rely on a numerical summary of data vs. a graphical one.

Numerical measures tell us a lot about the form of a distribution without resorting to graphical methods. The first kind of summary statistics we will see are those related to the measure of central tendency. Measures of central tendency tell us about the central part of the distribution.

### Mean and median

Here is an example from the PRB data.

```{r}
mean(prb$tfr)
```

Whoops! What happened? This means that R can't calculate the mean because there's a missing value, which we saw before. We can tell R to automatically remove missing values by:

```{r}
mean(prb$tfr, na.rm = T)
```

Which works without an error.

Many R functions will fail, or do listwise deletion of observations when NAs are present, so it's best to look at the documentation for the function you're wanting to use to see what it's default `na` action is.

The `mean()` function defaults to `na.rm=FALSE`, which indicates that it does not remove missing values by default.

We can also calculate the median TFR

```{r}
median(prb$tfr, na.rm = T)
```

### Measures of variation

One typical set of descriptive statistics that is very frequently used is the so-called **five number summary** and it consists of : the Minimum, lower quartile, median, upper quartile and maximum values.

This is often useful if the data are not symmetric or skewed. This is what you get when you use the `fivenum()` function, or we can include the mean if we use the `summary()` function.

```{r}
fivenum(prb$tfr)
```

```{r}
summary(prb$tfr)

```

The above sections have shown some basic ways to summarize data in R, along with many handy functions that are pervasive in my own general work flow.

Is this everything R will do, **No!**

Are these the only way to do things in R? **Never!**

I'm constantly marveled at how many new functions I see my students using in their own work and this reminds me how much of the R ecosystem I have yet to explore, even after twenty-plus years of using it.

# Summary {#sec-summary}

In today's boot camp, we covered some very basic concepts, but these are things that you will use daily once you begin using R in your own work and for courses.

All materials from tonight are available on [Github](https://github.com/coreysparks/r_courses/tree/master/r_bootcamp)
